export type JToken = JObject | JArray | JValue | IJData;
export type JValue = number | string | boolean | null;
export type JArray = Array<JToken>;
/**可以序列化为JSON文件的Object*/
export type JObject = {
    [key: string]: JToken;
};
/**可以保存为JToken的类
 */
export interface IJData {
    /**保存为JToken
     */
    toJSON(): JToken;
}
/**将JToken转换为字符串
 * @param {JToken} token - 待转换的Token
 * @param {string|number|null} space - 插入的空格 数字为空格数量 默认为制表符\t
 * @returns 转换完成的字符串
 */
export declare function stringifyJToken(token: JToken, space?: string | number | null | undefined): string;
/**转为可写的 */
export type Writeable<T> = {
    -readonly [P in keyof T]: T[P];
};
