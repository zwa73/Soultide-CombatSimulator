import { JObject, PromiseVerifyFn, stringifyJToken } from "./UtilInterfaces";
import * as https from 'https';
import * as http from 'http';
import { SLogger } from "./UtilLogger";
import { UtilFunc } from "./UtilFunctions";


/**网络工具 */
export namespace UtilCom{

/**通用post处理  
 * @param {"http"|"https"} posttype - post类型
 * @param {JObject} json 	        - 数据对象
 * @param {Object} options          - 参数对象
 * @param {number} [timeLimit]      - 超时时间/秒  最小为10秒
 * @returns {Promise<JObject|null>} 结果 null 为未能成功接收
 */
function sPost(posttype:"http"|"https",json:JObject,options:Object,timeLimit:number=-1):Promise<JObject|null>{
    //转换为毫秒
    const hasTimeLimit = (timeLimit>=10);
    if(hasTimeLimit)
        timeLimit*=1000

    const jsonStr = stringifyJToken(json);
    const funcName = "s"+posttype+"Psot";

    return new Promise((resolve, rejecte)=>{
        const resFunc = (res:http.IncomingMessage)=>{
            try{
                //请求超时
                if(hasTimeLimit){
                    res.setTimeout(timeLimit, ()=>{
                        //res.abort();
                        SLogger.warn(funcName+" 接收反馈超时: "+timeLimit+" ms");
                        resolve(null);
                        return;
                    });
                }

                let resdata = "";
                res.setEncoding('utf8');
                res.on('data',(chunk)=>resdata+=chunk);

                res.on('error',(e)=>{
                    SLogger.warn(funcName+" 接收反馈错误:"+e);
                    resolve(null);
                    return;
                });

                res.on('end',()=>{
                    if(resdata==""){
                        SLogger.warn(funcName+" 接收反馈错误: resdata 为空");
                        resolve(null);
                        return;
                    }
                    try{
                        let obj = JSON.parse(resdata);
                        SLogger.http(funcName+" 接受信息:",stringifyJToken(obj));
                        resolve(obj);
                        return;
                    }
                    catch(e){
                        SLogger.warn(funcName+" 接收反馈错误:"+e+"\n原始字符串:"+resdata);
                        resolve(null);
                        return;
                    }
                });
            }catch(err){
                SLogger.warn(funcName+" 未知错误:"+err);
                resolve(null);
                return;
            }
        };
        //路由 http/https
        let req:http.ClientRequest=null as any as http.ClientRequest;
        if(posttype === "https")
            req = https.request(options, resFunc);
        else if(posttype === "http")
            req = http.request(options, resFunc);

        //请求超时
        if(hasTimeLimit){
            req.setTimeout(timeLimit, ()=>{
                SLogger.warn(funcName+" 发送请求超时: "+timeLimit+" ms");
                req.destroy();
            });
        }

        req.on('error', (e)=>{
            SLogger.warn(funcName+" 发送请求错误:"+e);
            resolve(null);
        });

        req.write(jsonStr);
        req.end();
    });
}

/**发送一个 https POST请求并接受数据  
 * Object ()  
 * @async
 * @param {JObject} json 	   - 数据对象
 * @param {Object} options     - 参数对象
 * @param {number} [timeLimit] - 超时时间/秒  最小为10秒
 * @returns {Promise<JObject|null>} 结果 null 为未能成功接收
 */
export function shttpsPost(json:JObject,options:Object,timeLimit:number=-1):Promise<JObject|null>{
    return sPost("https",json,options,timeLimit);
}

/**发送一个 http POST请求并接受数据  
 * Object ()  
 * @async
 * @param {JObject} json 	   - 数据对象
 * @param {Object} options     - 参数对象
 * @param {number} [timeLimit] - 超时时间/秒  最小为10秒
 * @returns {Promise<JObject|null>} 结果 null 为未能成功接收
 */
export function shttpPost(json:JObject,options:Object,timeLimit:number=-1):Promise<JObject|null>{
    return sPost("http",json,options,timeLimit);
}



/**通用重复post处理  
 * @async
 * @param {"http"|"https"} posttype - post类型
 * @param {JObject} json 	        - 数据对象
 * @param {Object} options          - 参数对象
 * @param {number} [timeLimit]      - 超时时间/秒  最小为10秒
 * @param {number} [repeatCount]    - 重试次数
 * @param {number} [repeatTime]     - 超时时间/秒  最小为10秒
 * @param {PromiseVerifyFn<JObject|null>} [verifyFn]     - 判断有效性函数
 * @returns {Promise<JObject|null>}  - 结果 null 为未能成功接收
 */
async function sRepeatPost(posttype:"http"|"https",json:JObject,options:Object,timeLimit:number=-1,
    repeatCount:number=3,repeatTime:number=180,verifyFn?:PromiseVerifyFn<JObject|null>):Promise<JObject|null>{
    const procFn = ()=>sPost(posttype,json,options,timeLimit);
    return UtilFunc.repeatPromise(procFn,verifyFn,repeatCount,repeatTime);
}


/**重复一个 https POST请求并接受数据  
 * Object ()  
 * @async
 * @param {JObject} json 	        - 数据对象
 * @param {Object} options          - 参数对象
 * @param {number} [timeLimit]      - 超时时间/秒  最小为10秒
 * @param {number} [repeatCount]    - 重试次数
 * @param {number} [repeatTime]     - 超时时间/秒  最小为10秒
 * @param {PromiseVerifyFn<JObject|null>} [verifyFn]     - 判断有效性函数
 * @returns {Promise<JObject|null>}  - 结果 null 为未能成功接收
 */
export function shttpsRepeatPost(json:JObject,options:Object,timeLimit:number=-1,
    repeatCount:number=3,repeatTime:number=180,verifyFn?:PromiseVerifyFn<JObject|null>):Promise<JObject|null>{
    return sRepeatPost("https",json,options,timeLimit,repeatCount,repeatTime,verifyFn);
}

/**重复一个 http POST请求并接受数据  
 * Object ()  
 * @async
 * @param {JObject} json 	        - 数据对象
 * @param {Object} options          - 参数对象
 * @param {number} [timeLimit]      - 超时时间/秒  最小为10秒
 * @param {number} [repeatCount]    - 重试次数
 * @param {number} [repeatTime]     - 超时时间/秒  最小为10秒
 * @param {PromiseVerifyFn<JObject|null>} [verifyFn]     - 判断有效性函数
 * @returns {Promise<JObject|null>}  - 结果 null 为未能成功接收
 */
export function shttpRepeatPost(json:JObject,options:Object,timeLimit:number=-1,
    repeatCount:number=3,repeatTime:number=180,verifyFn?:PromiseVerifyFn<JObject|null>):Promise<JObject|null>{
    return sRepeatPost("http",json,options,timeLimit,repeatCount,repeatTime,verifyFn);
}

}